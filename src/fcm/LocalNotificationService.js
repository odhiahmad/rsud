import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import {Platform} from 'react-native';
import {not} from 'react-native-reanimated';

class LocalNotificationService {
    configure = (onOpenNotification) => {
        PushNotification.configure({
            onRegister: function (token) {
                console.log('[LocalNotificationService] onRegister: ', token);
            },
            onNotification: function (notification) {
                console.log('[LocalNotificationService] onNotification: ', notification);

                if (!notification?.data) {
                    return;
                }
                notification.userInteraction = true;
                onOpenNotification(Platform.OS === 'ios' ? notification.data.item : notification.data);

                if (Platform.OS === 'ios') {
                    notification.finish(PushNotificationIOS.FetchResult.NoData);
                }
            },

            // IOS ONLY (optional): default: all - Permissions to register.
            permissions: {
                alert: true,
                badge: true,
                sound: true,
            },

            // Should the initial notification be popped automatically
            // default: true
            popInitialNotification: true,

            /**
             * (optional) default: true
             * - Specified if permissions (ios) and token (android and ios) will requested or not,
             * - if not, you must call PushNotificationsHandler.requestPermissions() later
             * - if you are not using remote notification or do not have Firebase installed, use this:
             *     requestPermissions: Platform.OS === 'ios'
             */
            requestPermissions: true,
        });
    };

    unregister = () => {
        PushNotification.unregister();
    };

    showNotification = (id, title, message, data = {}, options = {}) => {
        PushNotification.localNotification({
            /* Android Only Properties */
            id: id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: title, // (optional)
            message: message, // (required)
            playSound: options.playSound || false, // (optional) default: true
            soundName: options.soundName || 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            userInteraction: false,
        });
    };

    buildNotification = (id, title, message, data = {}, options = {}) => {
        return {
            id: id,
            autoCancel: true, // (optional) default: true
            largeIcon: options.largeIcon || 'ic_launcher', // (optional) default: "ic_launcher"
            smallIcon: options.smallIcon || 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: message || '', // (optional) default: "message" prop
            subText: title || '', // (optional) default: none
            vibrate: options.vibrate || true, // (optional) default: true
            vibration: options.vibration || 300,
            priority: options.priority || 'high', // (optional) set notification priority, default: high
            visibility: options.visibility || 'private', // (optional) set notification visibility, default: private
            importance: options.importance || 'high',
            data: data,
        };
    };

    buildIOSNotification = (id, title, message, data = {}, options = {}) => {
        return {
            alertAction: options.alertAction || 'view',
            category: options.category || '',
            userInfo: {
                id: id,
                item: data,
            },
        };
    };

    cancelAllNotification = () =>{
        if(Platform.OS === 'ios'){
            PushNotification.removeAllDeliveredNotifications()
        }else{
            PushNotification.cancelAllLocalNotifications()
        }
    }

    removeDeliveredNotificationById = (notificationId) => {
        console.log('[LocalNotificationService] removeDeliveredNotificationById: ', notificationId);
        PushNotification.cancelLocalNotifications({id:`${notificationId}`})
    }
}

export const localNotificationService = new LocalNotificationService()
